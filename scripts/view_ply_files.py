#!/usr/bin/env python3
"""
PLY File Viewer

This script helps you visualize .ply files (point clouds and meshes) generated by the data visualization pipeline.

Usage:
    python scripts/view_ply_files.py [--ply_file PLY_FILE] [--ply_dir PLY_DIR]
"""

import argparse
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import warnings

# Suppress warnings
warnings.filterwarnings('ignore', category=UserWarning)
import matplotlib
matplotlib.set_loglevel("WARNING")

# Try to import Open3D for advanced viewing
try:
    import open3d as o3d
    OPEN3D_AVAILABLE = True
except ImportError:
    OPEN3D_AVAILABLE = False
    print("Warning: Open3D not available. Using matplotlib fallback.")


def read_ply_with_matplotlib(ply_file: Path):
    """Read PLY file and extract points for matplotlib visualization."""
    points = []
    colors = []
    
    with open(ply_file, 'r') as f:
        # Read header
        line = f.readline().strip()
        if line != 'ply':
            raise ValueError("Not a valid PLY file")
        
        vertex_count = 0
        face_count = 0
        in_header = True
        has_colors = False
        
        while in_header:
            line = f.readline().strip()
            if line.startswith('element vertex'):
                vertex_count = int(line.split()[-1])
            elif line.startswith('element face'):
                face_count = int(line.split()[-1])
            elif line.startswith('property uchar red') or line.startswith('property float red'):
                has_colors = True
            elif line == 'end_header':
                in_header = False
        
        # Read vertex data
        for i in range(vertex_count):
            line = f.readline().strip().split()
            x, y, z = float(line[0]), float(line[1]), float(line[2])
            points.append([x, y, z])
            
            if has_colors and len(line) >= 6:
                r, g, b = float(line[3]), float(line[4]), float(line[5])
                if r > 1.0 or g > 1.0 or b > 1.0:  # If colors are 0-255
                    r, g, b = r/255.0, g/255.0, b/255.0
                colors.append([r, g, b])
    
    return np.array(points), np.array(colors) if colors else None


def visualize_ply_matplotlib(ply_file: Path, output_dir: Path = None):
    """Visualize PLY file using matplotlib."""
    print(f"Loading PLY file: {ply_file}")
    
    try:
        points, colors = read_ply_with_matplotlib(ply_file)
        print(f"Loaded {len(points)} points")
        
        # Create visualization
        fig = plt.figure(figsize=(15, 10))
        
        # 3D scatter plot
        ax1 = fig.add_subplot(221, projection='3d')
        
        if colors is not None:
            ax1.scatter(points[:, 0], points[:, 1], points[:, 2], 
                       c=colors, s=1, alpha=0.6)
        else:
            ax1.scatter(points[:, 0], points[:, 1], points[:, 2], 
                       c=points[:, 2], cmap='viridis', s=1, alpha=0.6)
        
        ax1.set_xlabel('X')
        ax1.set_ylabel('Y')
        ax1.set_zlabel('Z')
        ax1.set_title('3D Point Cloud')
        
        # XY projection
        ax2 = fig.add_subplot(222)
        if colors is not None:
            ax2.scatter(points[:, 0], points[:, 1], c=colors[:, 0], s=1, alpha=0.6)
        else:
            ax2.scatter(points[:, 0], points[:, 1], c=points[:, 2], cmap='viridis', s=1, alpha=0.6)
        ax2.set_xlabel('X')
        ax2.set_ylabel('Y')
        ax2.set_title('XY Projection')
        ax2.grid(True, alpha=0.3)
        
        # XZ projection
        ax3 = fig.add_subplot(223)
        if colors is not None:
            ax3.scatter(points[:, 0], points[:, 2], c=colors[:, 1], s=1, alpha=0.6)
        else:
            ax3.scatter(points[:, 0], points[:, 2], c=points[:, 1], cmap='viridis', s=1, alpha=0.6)
        ax3.set_xlabel('X')
        ax3.set_ylabel('Z')
        ax3.set_title('XZ Projection')
        ax3.grid(True, alpha=0.3)
        
        # YZ projection
        ax4 = fig.add_subplot(224)
        if colors is not None:
            ax4.scatter(points[:, 1], points[:, 2], c=colors[:, 2], s=1, alpha=0.6)
        else:
            ax4.scatter(points[:, 1], points[:, 2], c=points[:, 0], cmap='viridis', s=1, alpha=0.6)
        ax4.set_xlabel('Y')
        ax4.set_ylabel('Z')
        ax4.set_title('YZ Projection')
        ax4.grid(True, alpha=0.3)
        
        plt.suptitle(f'PLY Visualization: {ply_file.name}', fontsize=14)
        plt.tight_layout()
        
        if output_dir:
            output_dir.mkdir(parents=True, exist_ok=True)
            output_file = output_dir / f"{ply_file.stem}_matplotlib_view.png"
            plt.savefig(output_file, dpi=300, bbox_inches='tight')
            print(f"Saved matplotlib visualization: {output_file}")
        
        plt.show()
        
    except Exception as e:
        print(f"Error visualizing with matplotlib: {e}")


def visualize_ply_open3d(ply_file: Path, output_dir: Path = None):
    """Visualize PLY file using Open3D."""
    if not OPEN3D_AVAILABLE:
        print("Open3D not available for advanced visualization")
        return
    
    print(f"Loading PLY file with Open3D: {ply_file}")
    
    try:
        # Load the PLY file
        if "pointcloud" in ply_file.name:
            # Point cloud
            pcd = o3d.io.read_point_cloud(str(ply_file))
            print(f"Loaded point cloud with {len(pcd.points)} points")
            
            if output_dir:
                output_dir.mkdir(parents=True, exist_ok=True)
                # Create matplotlib visualization for saving
                points = np.asarray(pcd.points)
                colors = np.asarray(pcd.colors) if len(pcd.colors) > 0 else None
                
                fig = plt.figure(figsize=(12, 8))
                ax = fig.add_subplot(111, projection='3d')
                
                if colors is not None and len(colors) > 0:
                    ax.scatter(points[:, 0], points[:, 1], points[:, 2], 
                             c=colors, s=1, alpha=0.7)
                else:
                    ax.scatter(points[:, 0], points[:, 1], points[:, 2], 
                             c=points[:, 2], cmap='viridis', s=1, alpha=0.7)
                
                ax.set_xlabel('X')
                ax.set_ylabel('Y')
                ax.set_zlabel('Z')
                ax.set_title(f'Point Cloud: {ply_file.name}')
                
                output_file = output_dir / f"{ply_file.stem}_open3d_view.png"
                plt.savefig(output_file, dpi=300, bbox_inches='tight')
                plt.close()
                print(f"Saved Open3D visualization: {output_file}")
            
            # Interactive visualization (will try to open window)
            print("Opening interactive Open3D viewer...")
            print("Controls: Mouse to rotate, wheel to zoom, Ctrl+C to close")
            try:
                o3d.visualization.draw_geometries([pcd])
            except Exception as e:
                print(f"Interactive viewer failed (normal in headless mode): {e}")
        
        else:
            # Mesh
            mesh = o3d.io.read_triangle_mesh(str(ply_file))
            print(f"Loaded mesh with {len(mesh.vertices)} vertices and {len(mesh.triangles)} triangles")
            
            if len(mesh.vertices) == 0:
                print("Warning: Mesh has no vertices")
                return
            
            # Compute vertex normals for better visualization
            mesh.compute_vertex_normals()
            
            if output_dir:
                output_dir.mkdir(parents=True, exist_ok=True)
                # Create matplotlib visualization for saving
                vertices = np.asarray(mesh.vertices)
                
                fig = plt.figure(figsize=(12, 8))
                ax = fig.add_subplot(111, projection='3d')
                
                # Plot vertices
                ax.scatter(vertices[:, 0], vertices[:, 1], vertices[:, 2], 
                         c=vertices[:, 2], cmap='viridis', s=1, alpha=0.7)
                
                ax.set_xlabel('X')
                ax.set_ylabel('Y')
                ax.set_zlabel('Z')
                ax.set_title(f'Mesh: {ply_file.name}')
                
                output_file = output_dir / f"{ply_file.stem}_mesh_view.png"
                plt.savefig(output_file, dpi=300, bbox_inches='tight')
                plt.close()
                print(f"Saved mesh visualization: {output_file}")
            
            # Interactive visualization
            print("Opening interactive Open3D mesh viewer...")
            print("Controls: Mouse to rotate, wheel to zoom, Ctrl+C to close")
            try:
                o3d.visualization.draw_geometries([mesh])
            except Exception as e:
                print(f"Interactive viewer failed (normal in headless mode): {e}")
    
    except Exception as e:
        print(f"Error loading PLY file: {e}")


def list_ply_files(directory: Path):
    """List all PLY files in a directory."""
    ply_files = list(directory.rglob("*.ply"))
    if not ply_files:
        print(f"No PLY files found in {directory}")
        return []
    
    print(f"\nFound {len(ply_files)} PLY files:")
    for i, ply_file in enumerate(ply_files, 1):
        rel_path = ply_file.relative_to(directory)
        size_mb = ply_file.stat().st_size / (1024 * 1024)
        print(f"  {i:2d}. {rel_path} ({size_mb:.1f} MB)")
    
    return ply_files


def main():
    """Main PLY viewer function."""
    parser = argparse.ArgumentParser(description="PLY File Viewer")
    parser.add_argument("--ply_file", type=Path,
                       help="Specific PLY file to visualize")
    parser.add_argument("--ply_dir", type=Path,
                       default=Path("plots"),
                       help="Directory to search for PLY files (will search recursively)")
    parser.add_argument("--output_dir", type=Path,
                       default=Path("plots/ply_views"),
                       help="Directory to save visualization images")
    parser.add_argument("--method", choices=["matplotlib", "open3d", "both"],
                       default="both",
                       help="Visualization method to use")
    parser.add_argument("--interactive", action="store_true",
                       help="Show interactive plots (matplotlib)")
    
    args = parser.parse_args()
    
    print("PLY File Viewer")
    print("=" * 50)
    
    if args.ply_file:
        # Visualize specific file
        if not args.ply_file.exists():
            print(f"Error: File {args.ply_file} does not exist")
            return
        
        print(f"Visualizing: {args.ply_file}")
        
        if args.method in ["matplotlib", "both"]:
            visualize_ply_matplotlib(args.ply_file, args.output_dir)
        
        if args.method in ["open3d", "both"] and OPEN3D_AVAILABLE:
            visualize_ply_open3d(args.ply_file, args.output_dir)
    
    else:
        # List and choose from directory
        if not args.ply_dir.exists():
            print(f"Error: Directory {args.ply_dir} does not exist")
            return
        
        ply_files = list_ply_files(args.ply_dir)
        if not ply_files:
            return
        
        print("\nVisualization options:")
        print("  0. Visualize all files (save images only)")
        print("  1-N. Visualize specific file")
        
        try:
            choice = input("\nEnter your choice (0 for all, or file number): ").strip()
            
            if choice == "0":
                # Visualize all files
                print("\nVisualizing all PLY files...")
                for ply_file in ply_files:
                    print(f"\nProcessing: {ply_file.name}")
                    
                    if args.method in ["matplotlib", "both"]:
                        visualize_ply_matplotlib(ply_file, args.output_dir)
                    
                    if args.method in ["open3d", "both"] and OPEN3D_AVAILABLE:
                        visualize_ply_open3d(ply_file, args.output_dir)
            
            else:
                # Visualize specific file
                file_idx = int(choice) - 1
                if 0 <= file_idx < len(ply_files):
                    ply_file = ply_files[file_idx]
                    print(f"\nVisualizing: {ply_file.name}")
                    
                    if args.method in ["matplotlib", "both"]:
                        visualize_ply_matplotlib(ply_file, args.output_dir)
                    
                    if args.method in ["open3d", "both"] and OPEN3D_AVAILABLE:
                        visualize_ply_open3d(ply_file, args.output_dir)
                else:
                    print("Invalid choice")
        
        except (ValueError, KeyboardInterrupt):
            print("\nExiting...")


if __name__ == "__main__":
    main()
